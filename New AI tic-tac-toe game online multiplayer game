import random

# Function to print  game board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 9)

# Function to check if a player has won
def check_winner(board, player):
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True

    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] == player:
        return True
    if board[0][2] == board[1][1] == board[2][0] == player:
        return True

    return False

# Function to evaluate the score of a board state
def evaluate(board):
    if check_winner(board, 'X'):
        return 1  # AI wins
    elif check_winner(board, 'O'):
        return -1  # Player wins
    else:
        return 0  # Draw

# Minimax function to determine the best move
def minimax(board, depth, maximizing_player):
    if depth == 0 or check_winner(board, 'X') or check_winner(board, 'O'):
        return evaluate(board)

    if maximizing_player:
        max_eval = float('-inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    eval = minimax(board, depth - 1, False)
                    board[row][col] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    eval = minimax(board, depth - 1, True)
                    board[row][col] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

# Function to make AI's move
def make_ai_move(board):
    best_score = float('-inf')
    best_move = None

    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = 'X'
                score = minimax(board, 0, False)
                board[row][col] = ' '

                if score > best_score:
                    best_score = score
                    best_move = (row, col)

    board[best_move[0]][best_move[1]] = 'X'

# Function to make player's move
def make_player_move(board):
    while True:
        move = input("Enter your move (row, column): ")
        row, col = move.split(',')
        row = int(row.strip())
        col = int(col.strip())

        if row >= 0 and row < 3 and col >= 0 and col < 3 and board[row][col] == ' ':
            board[row][col] = 'O'
            break
        else:
            print("Invalid move. Try again.")

# Main game loop
def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
